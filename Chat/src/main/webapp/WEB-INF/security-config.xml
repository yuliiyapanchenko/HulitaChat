<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns="http://www.springframework.org/schema/security"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd
             http://www.springframework.org/schema/security
             http://www.springframework.org/schema/security/spring-security-3.2.xsd">

    <beans:import resource="application-persistence.xml"/>

    <http pattern="/resources/**" security="none"/>

    <http auto-config="true" use-expressions="true">
        <!-- Login pages -->
        <form-login login-page="/login" authentication-failure-url="/login-error"/>
        <logout delete-cookies="JESSIONID"/>

        <!-- Anyone can access these urls -->
        <intercept-url pattern="/auth/**" access="permitAll"/>
        <intercept-url pattern="/login" access="permitAll"/>
        <intercept-url pattern="/signin/**" access="permitAll"/>
        <intercept-url pattern="/signup/**" access="permitAll"/>
        <intercept-url pattern="/user/register/**" access="permitAll"/>

        <!-- Security zones -->
        <intercept-url pattern="/**" access="hasRole('ROLE_DEVELOPERS') || hasRole('ROLE_USER')"/>

        <custom-filter ref="socialAuthenticationFilter" before="PRE_AUTH_FILTER"/>

    </http>

    <authentication-manager alias="authenticationManager">

        <authentication-provider user-service-ref="userService">
            <password-encoder hash="bcrypt"/>
        </authentication-provider>

        <authentication-provider ref="socialAuthenticationProvider"/>

        <authentication-provider>
            <password-encoder hash="bcrypt"/>
            <jdbc-user-service data-source-ref="dataSource"
                               users-by-username-query="SELECT email as username, password, enabled FROM users WHERE email=?"
                               authorities-by-username-query="SELECT users.email as username, roles.role as authority
                                                                FROM authorities
                                                                INNER JOIN roles ON roles.id = authorities.role_id
                                                                INNER JOIN users ON users.id = authorities.user_id
                                                                WHERE users.email=?"/>
        </authentication-provider>

        <ldap-authentication-provider
                user-search-filter="(uid={0})"
                user-search-base="ou=people"
                group-search-filter="(uniqueMember={0})"
                group-search-base="ou=groups"
                group-role-attribute="cn"
                role-prefix="ROLE_"/>
    </authentication-manager>

    <ldap-server ldif="classpath:test-server.ldif"/>

    <beans:bean id="socialAuthenticationProvider"
                class="org.springframework.social.security.SocialAuthenticationProvider">
        <beans:constructor-arg index="0" ref="usersConnectionRepository"/>
        <beans:constructor-arg index="1" ref="chatSocialUserDetailsService"/>
    </beans:bean>

    <beans:bean id="chatSocialUserDetailsService" class="com.jpanchenko.chat.service.ChatSocialUserDetailsService"/>

    <beans:bean id="socialAuthenticationFilter" class="org.springframework.social.security.SocialAuthenticationFilter">
        <beans:constructor-arg index="0" ref="authenticationManager"/>
        <beans:constructor-arg index="1" ref="userIdSource"/>
        <beans:constructor-arg index="2" ref="usersConnectionRepository"/>
        <beans:constructor-arg index="3" ref="connectionFactoryLocator"/>
        <!-- Sets the url of the registration form. -->
        <beans:property name="signupUrl" value="/user/register"/>
    </beans:bean>

    <beans:bean id="userIdSource" class="org.springframework.social.security.AuthenticationNameUserIdSource"/>

</beans:beans>
